services:

  zookeeper:
    container_name: zookeeper-business
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - postgres

  kafka:
    container_name: kafka-business
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - postgres

  redis:
    container_name: redis-business
    image: redis
    ports:
      - '6379:6379'
    volumes:
      - redis:/data
    networks:
      - postgres

  business-service:
    image: "pcminh0505/business-service" # For Production
    build:
      context: .
    container_name: business-service
    ports:
      - "8090:8080"
    depends_on:
      postgres:
          condition: service_healthy
    links:
      - redis
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - postgres

  postgres:
    image: postgres
    container_name: postgres-business
    ports:
      - "5123:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - PGDATA=/data/postgres
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin-business
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5051:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  redis:
